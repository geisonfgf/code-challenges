class Matrix:
    def __init__(self, matrix):
        self.matrix = matrix
        self.rows = len(matrix)
        self.cols = len(matrix[0])

    def __str__(self):
        return '\n'.join([' '.join(map(str, row)) for row in self.matrix])

    def get_element(self, row, col):
        return self.matrix[row][col]

    def set_element(self, row, col, value):
        self.matrix[row][col] = value

    def transpose(self):
        transposed = [[self.matrix[j][i] for j in range(self.rows)] for i in range(self.cols)]
        return transposed

    def add(self, other):
        if isinstance(other, Matrix):
            return [[self.matrix[i][j] + other.matrix[i][j] for j in range(self.cols)] for i in range(self.rows)]
        else:
            return [[self.matrix[i][j] + other for j in range(self.cols)] for i in range(self.rows)]

    def subtract(self, other):
        if isinstance(other, Matrix):
            return [[self.matrix[i][j] - other.matrix[i][j] for j in range(self.cols)] for i in range(self.rows)]
        else:
            return [[self.matrix[i][j] - other for j in range(self.cols)] for i in range(self.rows)]

    def multiply(self, other):
        if isinstance(other, Matrix):
            result = [[0 for _ in range(other.cols)] for _ in range(self.rows)]
            for i in range(self.rows):
                for j in range(other.cols):
                    for k in range(self.cols):
                        result[i][j] += self.matrix[i][k] * other.matrix[k][j]
            return result
        else:
            return [[self.matrix[i][j] * other for j in range(self.cols)] for i in range(self.rows)]

    def elementwise_multiply(self, other):
        if isinstance(other, Matrix):
            return [[self.matrix[i][j] * other.matrix[i][j] for j in range(self.cols)] for i in range(self.rows)]
        else:
            return [[self.matrix[i][j] * other for j in range(self.cols)] for i in range(self.rows)]

    def divide(self, other):
        if isinstance(other, Matrix):
            return [[self.matrix[i][j] / other.matrix[i][j] for j in range(self.cols)] for i in range(self.rows)]
        else:
            return [[self.matrix[i][j] / other for j in range(self.cols)] for i in range(self.rows)]

    def determinant(self):
        if self.rows != self.cols:
            raise ValueError("Matrix must be square to compute determinant")
        return self._determinant(self.matrix)

    def _determinant(self, matrix):
        if len(matrix) == 2 and len(matrix[0]) == 2:
            return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
        determinant = 0
        for c in range(len(matrix)):
            determinant += ((-1) ** c) * matrix[0][c] * self._determinant(self._minor(matrix, 0, c))
        return determinant

    def _minor(self, matrix, i, j):
        return [row[:j] + row[j+1:] for row in (matrix[:i] + matrix[i+1:])]

    def inverse(self):
        determinant = self.determinant()
        if determinant == 0:
            raise ValueError("Matrix is singular and cannot be inverted")
        matrix_minor = [[self._minor(self.matrix, i, j) for j in range(self.cols)] for i in range(self.rows)]
        cofactor = [[((-1) ** (i + j)) * self._determinant(matrix_minor[i][j]) for j in range(self.cols)] for i in range(self.rows)]
        adjugate = self._transpose(cofactor)
        return [[adjugate[i][j] / determinant for j in range(self.cols)] for i in range(self.rows)]

    def _transpose(self, matrix):
        return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]

    def trace(self):
        if self.rows != self.cols:
            raise ValueError("Matrix must be square to compute trace")
        return sum(self.matrix[i][i] for i in range(self.rows))

    def rank(self):
        return len([row for row in self.matrix if any(row)])

    @staticmethod
    def identity(size):
        return [[1 if i == j else 0 for j in range(size)] for i in range(size)]

    @staticmethod
    def zeros(rows, cols):
        return [[0 for _ in range(cols)] for _ in range(rows)]

    @staticmethod
    def ones(rows, cols):
        return [[1 for _ in range(cols)] for _ in range(rows)]

    def get_rows(self):
        return self.matrix

    def get_columns(self):
        return self._transpose(self.matrix)

    def spiral_traverse(self):
        result = []
        top, bottom, left, right = 0, self.rows - 1, 0, self.cols - 1

        while top <= bottom and left <= right:
            for i in range(left, right + 1):
                result.append(self.matrix[top][i])
            top += 1

            for i in range(top, bottom + 1):
                result.append(self.matrix[i][right])
            right -= 1

            if top <= bottom:
                for i in range(right, left - 1, -1):
                    result.append(self.matrix[bottom][i])
                bottom -= 1

            if left <= right:
                for i in range(bottom, top - 1, -1):
                    result.append(self.matrix[i][left])
                left += 1

        return result

    def diagonal_traverse(self):
        diagonals = {}

        for i in range(self.rows):
            for j in range(self.cols):
                if i + j not in diagonals:
                    diagonals[i + j] = []
                diagonals[i + j].append(self.matrix[i][j])

        result = []
        for k in sorted(diagonals.keys()):
            result.extend(diagonals[k])
        return result

    def zigzag_traverse(self):
        result = []
        row, col = 0, 0
        going_down = True

        while self.is_in_bounds(row, col):
            result.append(self.matrix[row][col])
            if going_down:
                if col == 0 or row == self.rows - 1:
                    going_down = False
                    if row == self.rows - 1:
                        col += 1
                    else:
                        row += 1
                else:
                    row += 1
                    col -= 1
            else:
                if row == 0 or col == self.cols - 1:
                    going_down = True
                    if col == self.cols - 1:
                        row += 1
                    else:
                        col += 1
                else:
                    row -= 1
                    col += 1

        return result

    def is_in_bounds(self, row, col):
        return 0 <= row < self.rows and 0 <= col < self.cols

    def all_traverses(self):
        traverses = {
            'rows': self.get_rows(),
            'columns': self.get_columns(),
            'spiral': self.spiral_traverse(),
            'diagonal': self.diagonal_traverse(),
            'zigzag': self.zigzag_traverse()
        }
        return traverses

# Example usage
matrix_data = [
    [1, 2, 3, 4],
    [12, 13, 14, 5],
    [11, 16, 15, 6],
    [10, 9, 8, 7]
]

matrix = Matrix(matrix_data)
print("Matrix:")
print(matrix)
print("Rows:")
print(matrix.get_rows())
print("Columns:")
print(matrix.get_columns())
print("Spiral Traverse:")
print(matrix.spiral_traverse())
print("Diagonal Traverse:")
print(matrix.diagonal_traverse())
print("Zigzag Traverse:")
print(matrix.zigzag_traverse())
print("All Traverses:")
print(matrix.all_traverses())
